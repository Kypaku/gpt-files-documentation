[{"path":"engine\\api.ts","description":"The engine\\api.ts file provides functions to generate short descriptions for files and folders using the GPT-Simple-API. It includes methods for getting file descriptions, folder descriptions, and answers to prompts with customizable options such as token limits, temperature, and model selection.","size":2243},{"path":"engine\\cli.ts","description":"The engine\\cli.ts file is a command-line interface script for generating documentation using the DocumentationGenerator class. It provides options for setting maximum tokens, bytes per token, maximum queries, output file, configuration file, and more. The script reads input files or directories and generates documentation based on the provided options.","size":3614},{"path":"engine\\cli_insight.ts","description":"The engine\\cli_insight.ts file is a command-line interface (CLI) script that allows users to run the Insight class with specified options, such as file names and mode, by providing the necessary arguments. The script handles errors and displays the results of the Insight operation.","size":1008},{"path":"engine\\cli_update.ts","description":"The engine\\cli_update.ts file is a script that updates the documentation of a given directory or file using the OpenAI API. It provides various options to configure the documentation generation process, such as maximum tokens, bytes per token, model temperature, and exclusion patterns. The script reads configuration from a JSON file and merges the generated documentation with existing descriptions in an output file.","size":4799},{"path":"engine\\index.ts","description":"The engine\\index.ts file contains the DocumentationGenerator class, which is responsible for generating documentation for a given set of files and folders. It provides options to configure the generation process, such as maximum queries, tokens, and API key. The class also supports stopping the generation process and handles errors during execution.","size":6356},{"path":"engine\\insight.ts","description":"The engine/insight.ts file contains the Insight class, which is responsible for interacting with the GPT API to ask questions and receive answers based on provided documentation. It supports various options such as API key, CLI mode, file names, content strings, and more. The class also includes methods for asking questions about files or content and parsing the results.","size":3162},{"path":"helpers\\index.ts","description":"The helpers\\index.ts file contains utility functions for working with files and directories, such as getting files in a directory, generating nested file structures, and filtering files based on exclusion rules and size limits. It also provides functions to manage parent folders and convert file lengths to token counts.","size":4634},{"path":"package.json","description":"The package.json file contains the configuration and dependency information for the \"recursive-documentation\" project, a Vue.js application with Electron integration. It includes scripts for serving, building, and linting the project, as well as a list of dependencies and development dependencies required for the application to function properly.","size":1689},{"path":"README.md","description":"\"GPT Project Insight\" is an engine for generating recursive documentation and working on projects using ChatGPT. It requires an API Key for the Open AI API and offers features like project setup, running an Electron app, generating documentation using CLI, and customizable configurations. The application also provides examples of prompts and model outputs.","size":2813},{"path":"src\\App.vue","description":"This file defines the main Vue.js component for the application, including the layout, input fields, and tabs for Documentation and Insight. It also handles loading and saving configuration files, updating settings, and managing the application's state.","size":8842},{"path":"src\\background.ts","description":"This file, src\\background.ts, sets up the Electron application's main process, including creating the browser window, handling window events, and registering Vue Devtools in development mode.","size":2774},{"path":"src\\components\\Config.vue","description":"This file defines a Vue component for managing configuration settings in the application. It allows users to load, save, and delete configurations, as well as display the current configuration source. The component also provides visual feedback for changes in the configuration state.","size":1904},{"path":"src\\components\\File.vue","description":"The File.vue component is a Vue.js component that displays a file's path, state, prompt, and description in an accordion format. It allows users to toggle the visibility of the prompt and delete queued files. The component uses the Accordeon.vue component for collapsible content display and emits an event when a file is deleted.","size":2111},{"path":"src\\components\\Files.vue","description":"The Files.vue component is a part of a documentation generator application. It displays a list of files and allows users to exclude specific files or directories from the documentation generation process. Users can also delete items from the list. The component includes InputTextarea, FileTree, and Accordeon subcomponents for better user experience and functionality.","size":2951},{"path":"src\\components\\insight\\ContentInsight.vue","description":"The ContentInsight.vue component is a part of the Insight application that allows users to search, add, and remove content from files. It provides an accordion-style interface with a search bar for filtering files, a list of files with their respective sizes in tokens, and buttons to add or remove content. Users can also toggle between raw text view and the default view. The component uses various helper functions and emits events for updating the content value.","size":4331},{"path":"src\\components\\insight\\FileInsight.vue","description":"\"FileInsight.vue is a Vue component that displays file information, such as file path, size, and description. It allows users to toggle the visibility of the description and add or remove descriptions for each file.\"","size":1749},{"path":"src\\components\\insight\\FilesInsight.vue","description":"The FilesInsight.vue component is a file management tool that allows users to search, view, and edit files in a list or raw text format. It features an accordion-style layout with a search bar, file list, and input textarea for editing. Users can toggle between the list view and raw text view, as well as add or remove descriptions for each file. The component is built using Vue.js and includes various sub-components such as Accordeon, List, InputTextarea, and FileInsight.","size":3233},{"path":"src\\components\\insight\\Result.vue","description":"The Result.vue component displays the result of a search query, including code segments and related actions. It allows users to open matched files directly from the results and supports syntax highlighting for better readability.","size":4893},{"path":"src\\components\\insight\\ResultFiles.vue","description":"The ResultFiles.vue component displays the result of requested files, including file descriptions and content, in a formatted manner. It also provides actions to add file descriptions and content to the result. The component handles the display of code blocks and text segments, as well as sorting and filtering matched files.","size":6504},{"path":"src\\components\\misc\\InputTextarea.vue","description":"This file defines a Vue component for an input textarea with optional label and suggestions. The component allows users to enter text, and it can display filtered suggestions based on the entered text. It also supports keyboard navigation and emits events for updating the value and handling suggestions.","size":2613},{"path":"src\\components\\Settings.vue","description":"The Settings.vue component allows users to configure various settings related to the documentation generator, such as maximum number of requests, model, max tokens, temperature, and timeouts. It includes input fields for each setting and uses local storage to save the user's preferences.","size":6359},{"path":"src\\components\\TabDocs.vue","description":"TabDocs.vue is a Vue.js component that allows users to generate and update documentation for selected files in a project. It provides options to generate documentation for all files, update documentation for changed files since the last generation, and save the generated documentation as a JSON file. The component also displays the count of requests and handles loading states during the generation process.","size":10786},{"path":"src\\components\\TabInsight.vue","description":"The TabInsight.vue component is a user interface for interacting with the Insight engine, allowing users to input prompts, toggle options, and display results. Users can ask for files or run the engine with their chosen settings. The component also provides examples, error handling, and token counting to ensure a smooth experience.","size":15115},{"path":"src\\components\\TheFooter.vue","description":"TheFooter.vue is a Vue component that defines the footer section of the application, containing buttons for various actions such as reloading the page, opening external links, clearing cache, and opening developer tools. It also checks if VSCode is installed and provides a button to open it if available.","size":2583},{"path":"src\\helpers\\index.ts","description":"This file contains helper functions for wrapping file names in a string with HTML anchor tags and finding the indexes of a substring within a given string. It also imports necessary modules such as 'child_process', 'fs', and 'path'.","size":573},{"path":"src\\main.ts","description":"The src\\main.ts file initializes a Vue.js application with the imported App component, applies Tailwind CSS styling, and sets up keyboard event listeners for toggling Electron's developer tools and reloading the application.","size":382},{"path":"types\\index.ts","description":"The index.ts file in the types folder defines an IFile interface, which represents a file object with properties such as path, size, description, state, and more. This interface is used to manage and interact with files throughout the application.","size":342},{"path":"src\\components\\insight","description":"Directory name: src\\components\\insight\n\nThe Insight directory contains Vue components for managing and displaying file information, including search, editing, and result display functionalities. It features an accordion-style interface with search bars, file lists, and input textareas for easy navigation and editing. Components include ContentInsight.vue, FileInsight.vue, FilesInsight.vue, Result.vue, and ResultFiles.vue."},{"path":"src\\components","description":"The src\\components directory contains various Vue.js components for a documentation generator application, including components for managing configuration settings, displaying and editing file information, configuring generator settings, and interacting with the Insight engine. The directory also includes subcomponents for input textareas, accordions, and file trees to enhance user experience and functionality."},{"path":"src","description":"Directory name: src\n\nThe src directory contains the core files and components for a Vue.js and Electron-based documentation generator application. It includes the main Vue.js component (App.vue), Electron's main process setup (background.ts), helper functions (helpers\\index.ts), Vue.js application initialization (main.ts), and various Vue.js components for managing settings, file information, and user interactions (components). The directory ensures seamless integration of functionalities, styling, and user experience enhancements."},{"path":".","description":"The \".\" directory contains the core files and components for the \"recursive-documentation\" project, a Vue.js and Electron-based application that generates recursive documentation using ChatGPT. It includes utility functions (helpers\\index.ts), configuration and dependency information (package.json), project description (README.md), file object interface definition (types\\index.ts), core application files (src directory), and GPT API integration for generating documentation and insights (engine directory). This well-structured directory ensures seamless integration of functionalities, styling, and user experience enhancements for the application."},{"path":"engine","description":"The \"engine\" directory contains scripts and classes for generating documentation and insights using the GPT API. It includes command-line interfaces for documentation generation, updating existing documentation, and running the Insight class with specified options. The core functionality is provided by the DocumentationGenerator and Insight classes, which interact with the GPT API to generate descriptions and answer questions based on provided documentation."}]