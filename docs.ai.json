[{"path":"engine\\api.ts","description":"This file contains functions for retrieving descriptions of files and folders using the GPT-3 API. It includes interfaces for file descriptions and response objects, as well as a timeout function for handling API requests. The functions use prompts and options to generate short descriptions using GPT-3, and return the description along with the original prompt.","size":1940},{"path":"engine\\cli.ts","description":"This file contains the command-line interface (CLI) for the DocumentationGenerator class. It defines the options that can be passed to the CLI, reads a configuration file if present, and calls the DocumentationGenerator class to generate documentation for selected files or directories. The result is written to a specified output file or a default location.","size":4365},{"path":"engine\\index.ts","description":"The file engine\\index.ts contains the implementation of a DocumentationGenerator class, which generates descriptions for files and folders using an API. It also includes options for customizing the generation process, such as setting a maximum number of queries or tokens, and a semaphore function to limit the number of simultaneous queries.","size":5389},{"path":"helpers\\index.ts","description":"The file helpers\\index.ts contains functions for working with files and directories, including getting a list of files in a directory, generating a nested file structure, and getting parent folders for a list of files. It also imports the fs and path modules, as well as the getFileSize function from node_gm and the IFile interface from types.","size":2424},{"path":"package.json","description":"The package.json file contains information about the project, including its name, version, and dependencies. It also includes scripts for serving, building, and linting the project, as well as specific scripts for building and serving an Electron app. The file lists both production and development dependencies, including Vue.js, Tailwind CSS, TypeScript, and various ESLint plugins.","size":1689},{"path":"README.md","description":"This file README.md provides information about the Recursive documentation generator, including how to set up and run the project, as well as how to generate using CLI. It also mentions that an API Key is required to make requests to Open AI API. The file includes screenshots of the Electron app in action.","size":1236},{"path":"src\\App.vue","description":"The App.vue file contains the main component of the application, which includes various sub-components such as InputText, Files, Settings, and Result. It also defines data properties and methods for handling user interactions and generating documentation based on selected files. The file uses Vue.js syntax and imports various helper functions and libraries such as Lodash and Electron.","size":12198},{"path":"src\\background.ts","description":"This file, located at src\\background.ts, contains the main code for creating and managing the Electron browser window. It registers the necessary schemes, creates the window with specified dimensions and preferences, loads the appropriate URL based on whether it is in development mode or not, and handles events such as window closing and activation. Additionally, it installs Vue Devtools if in development mode and exits cleanly upon request from the parent process.","size":2687},{"path":"src\\components\\File.vue","description":"This is a Vue.js component file located at src\\components\\File.vue. It contains an Accordeon component that displays information about a file, including its path, state, prompt, and response. The component can be disabled if there is no description and the state is not an error. The user can click on a button to delete the file. The file data is passed as a prop of type IFile and the component imports the Accordeon component from another file.","size":2092},{"path":"src\\components\\Files.vue","description":"The Files.vue file is a Vue component that displays a list of selected files and allows the user to exclude certain files or directories. It also includes a FileTree component and uses several other custom components such as InputText, Accordeon, and File. The component takes in an array of IFile objects and two optional objects for configuration. The selectedFiles computed property filters the files based on the excludes property and maximum file size, while also adding parent folders to the list. The del method emits an event to update the excludes property when a file is deleted.","size":3962},{"path":"src\\components\\misc\\Accordeon.vue","description":"Accordeon.vue is a Vue.js component that creates an accordion-style container with a header and content section that can be toggled open or closed. It includes options for customizing the title, disabling the toggling functionality, and hiding the toggle arrow.","size":2170},{"path":"src\\components\\misc\\FileTree.vue","description":"The FileTree.vue component is a Vue.js file that displays a nested file tree structure with checkboxes for selecting files. It takes in an array of NestedFile objects and allows the user to select multiple files by emitting an update event with the selected file paths. The component also supports nesting of subdirectories and files.","size":1594},{"path":"src\\components\\misc\\IconFolder.vue","description":"IconFolder.vue is a Vue component that displays an icon of a folder using SVG.","size":1814},{"path":"src\\components\\misc\\InputText.vue","description":"This file contains the code for a Vue.js component called InputText, which is a text input field with optional suggestions. It includes functionality for filtering and displaying suggestions based on user input, as well as emitting events when the component is mounted or when the user selects a suggestion. The component also includes styling using SCSS.","size":2808},{"path":"src\\components\\Result.vue","description":"The Result.vue file is a Vue component that displays a result in a div element. It takes in a prop called \"res\" of type object and has no computed properties or methods. The component is defined using TypeScript and has an empty style block.","size":636},{"path":"src\\components\\Settings.vue","description":"The file src\\components\\Settings.vue contains a Vue component that displays a settings accordion with input fields for configuring various options such as maximum number of requests, model, max tokens file and directory, and temperature. It also includes sub-components for InputText and Accordeon.","size":3051},{"path":"src\\main.ts","description":"The main.ts file is responsible for importing necessary modules and mounting the Vue application. It also includes event listeners for keyboard shortcuts to toggle developer tools and reload the page.","size":382},{"path":"types\\index.ts","description":"This file contains an interface for defining properties of a file, including its path, size, state, and description. It also includes a promise for retrieving a description response from an API.","size":320},{"path":"src\\components\\misc","description":"The \"misc\" directory in the \"components\" folder contains a variety of Vue.js components for miscellaneous purposes. These include an accordion-style container with customizable options, a file tree structure with nested subdirectories and files, an SVG icon of a folder, and a text input field with optional suggestions and styling."},{"path":"src\\components","description":"The \"components\" directory in the \"src\" folder contains various Vue.js components for different purposes. It includes a file component that displays information about a file, a files component that allows the user to select and exclude files, a result component that displays a result, and a settings component for configuring options. Additionally, the \"misc\" directory within this folder contains miscellaneous components such as an accordion container, file tree structure, SVG icon of a folder, and text input field with suggestions."},{"path":"src","description":"The \"src\" directory contains the main components and code for an Electron-based application. It includes the App.vue file, which defines the main component and sub-components, as well as data properties and methods for user interactions. The background.ts file manages the Electron browser window, while main.ts imports modules and mounts the Vue application. The \"components\" directory contains various Vue.js components for displaying files, results, settings, and more."},{"path":".","description":"This directory contains the Recursive documentation generator project, which includes files for working with files and directories, managing dependencies, and generating descriptions using the GPT-3 API. It includes an Electron-based application with various Vue.js components for displaying files and results, as well as an engine directory for customizing the generation process. The README.md file provides detailed information on how to set up and run the project."},{"path":"engine","description":"The \"engine\" directory contains files for generating descriptions of files and folders using the GPT-3 API. It includes an API file with functions for retrieving descriptions, a CLI file for the DocumentationGenerator class, and an index file with options for customizing the generation process."}]