[{"path":"engine\\api.ts","description":"The engine\\api.ts file provides functions to generate short descriptions for files and folders using the GPT-Simple-API. It includes methods for getting file descriptions, folder descriptions, and answers to prompts with customizable options such as token limits, temperature, and model selection.","size":2243},{"path":"engine\\cli.ts","description":"The engine\\cli.ts file is a command-line interface script for generating documentation using the DocumentationGenerator class. It provides options for setting maximum tokens, bytes per token, maximum queries, output file, configuration file, and more. The script reads input files or directories and generates documentation based on the provided options.","size":3614},{"path":"engine\\cli_insight.ts","description":"The engine\\cli_insight.ts file is a command-line interface (CLI) script that allows users to run the Insight class with specified options, such as file names and mode, by providing the necessary arguments. The script handles errors and displays the results of the Insight operation.","size":1008},{"path":"engine\\cli_update.ts","description":"The engine\\cli_update.ts file is a script that updates the documentation of a given directory or file using the OpenAI API. It provides various options to configure the documentation generation process, such as maximum tokens, bytes per token, model temperature, and exclusion patterns. The script reads configuration from a JSON file and merges the generated documentation with existing descriptions in an output file.","size":4799},{"path":"engine\\index.ts","description":"The engine\\index.ts file contains the DocumentationGenerator class, which is responsible for generating documentation for a given set of files and folders. It provides options to configure the generation process, such as maximum queries, tokens, and API key. The class also supports stopping the generation process and handles errors during execution.","size":6356},{"path":"engine\\insight.ts","description":"The Insight class in the engine\\insight.ts file provides methods to interact with GPT-3 API for generating answers based on given prompts and file content. It supports asking questions about specific files or content, parsing the response to extract required files, and stopping the process if needed. The class also handles API key management and token count calculation for efficient API usage.","size":3081},{"path":"helpers\\index.ts","description":"The helpers\\index.ts file contains utility functions for working with files and directories, such as getting files in a directory, generating nested file structures, and filtering files based on exclusion rules and size limits. It also provides functions to manage parent folders and convert file lengths to token counts.","size":4634},{"path":"package.json","description":"The package.json file contains the configuration and dependency information for the \"recursive-documentation\" project, a Vue.js application with Electron integration. It includes scripts for serving, building, and linting the project, as well as a list of dependencies and development dependencies required for the application to function properly.","size":1689},{"path":"README.md","description":"\"GPT Project Insight\" is an engine for generating recursive documentation and working on projects using ChatGPT. It requires an API Key for the Open AI API and offers features like project setup, running an Electron app, generating documentation using CLI, and customizable configurations. The application also provides examples of prompts and model outputs.","size":2813},{"path":"src\\App.vue","description":"This file defines the main Vue.js component for the application, including the layout, input fields, and tabs for Documentation and Insight. It also handles loading and saving configuration files, updating settings, and managing the application's state.","size":8842},{"path":"src\\background.ts","description":"This file, src\\background.ts, sets up the Electron application's main process, including creating the browser window, handling window events, and registering Vue Devtools in development mode.","size":2774},{"path":"src\\components\\Config.vue","description":"This file defines a Vue component for managing configuration settings in the application. It allows users to load, save, and delete configurations, as well as display the current configuration source. The component also provides visual feedback for changes in the configuration state.","size":1904},{"path":"src\\components\\File.vue","description":"The File.vue component is a Vue.js component that displays a file's path, state, prompt, and description in an accordion format. It allows users to toggle the visibility of the prompt and delete queued files. The component uses the Accordeon.vue component for collapsible content display and emits an event when a file is deleted.","size":2111},{"path":"src\\components\\Files.vue","description":"The Files.vue component is a part of a documentation generator application. It displays a list of files and allows users to exclude specific files or directories from the documentation generation process. Users can also delete items from the list. The component includes InputTextarea, FileTree, and Accordeon subcomponents for better user experience and functionality.","size":2951},{"path":"src\\components\\insight\\ContentInsight.vue","description":"The ContentInsight.vue component is a Vue.js component that allows users to view and edit the content of files in an accordion-style interface. Users can toggle between raw text and a list of files, add or remove content, and see the token count for each file. The component uses various helper functions and emits events to update the parent component with changes made to the content.","size":3775},{"path":"src\\components\\insight\\FileInsight.vue","description":"The FileInsight.vue component is a Vue.js component that displays file information such as file path, size, and description. It allows users to toggle the visibility of the description and add or remove descriptions for each file. The component uses a flex layout to display the file details and buttons for toggling the description.","size":1751},{"path":"src\\components\\insight\\FilesInsight.vue","description":"\"FilesInsight.vue\" is a Vue component that displays a list of files with their respective details, such as path, size, and description. Users can toggle between the raw text view and the formatted list view. The component also allows users to add or remove file descriptions.","size":2677},{"path":"src\\components\\insight\\Result.vue","description":"The Result.vue component displays the result of a search query, including code segments and related actions. It allows users to open matched files directly from the results and supports syntax highlighting for better readability.","size":4893},{"path":"src\\components\\insight\\ResultFiles.vue","description":"The ResultFiles.vue component displays the result of requested files, including file descriptions and content, in a formatted manner. It also provides actions to add file descriptions and content to the result. The component handles the display of code blocks and text segments, as well as sorting and filtering matched files.","size":6504},{"path":"src\\components\\misc\\InputTextarea.vue","description":"This file defines a Vue component for an input textarea with optional label and suggestions. The component allows users to enter text, and it can display filtered suggestions based on the entered text. It also supports keyboard navigation and emits events for updating the value and handling suggestions.","size":2613},{"path":"src\\components\\Settings.vue","description":"The Settings.vue component allows users to configure various settings related to the documentation generator, such as maximum number of requests, model, max tokens, temperature, and timeouts. It includes input fields for each setting and uses local storage to save the user's preferences.","size":6359},{"path":"src\\components\\TabDocs.vue","description":"TabDocs.vue is a Vue.js component that allows users to generate and update documentation for selected files in a project. It provides options to generate documentation for all files, update documentation for changed files since the last generation, and save the generated documentation as a JSON file. The component also displays the count of requests and handles loading states during the generation process.","size":10786},{"path":"src\\components\\TabInsight.vue","description":"TabInsight.vue is a Vue.js component that provides an interface for users to interact with the Insight engine. Users can input a prompt, toggle various options such as including files, descriptions, and content, and view the resulting output. The component also displays token usage information and handles errors and warnings related to token limits and other issues.","size":13658},{"path":"src\\components\\TheFooter.vue","description":"TheFooter.vue is a Vue component that provides a sticky footer with various utility buttons, such as Reload, OpenAI Page, Repo, Clear Cache, and Open Dev Tools. It also includes methods for opening external links and clearing local storage data.","size":1779},{"path":"src\\helpers\\index.ts","description":"This file contains helper functions for wrapping file names in a string with an anchor tag and finding the indexes of a substring within a string.","size":472},{"path":"src\\main.ts","description":"The src\\main.ts file initializes a Vue.js application with the imported App component, applies Tailwind CSS styling, and sets up keyboard event listeners for toggling Electron's developer tools and reloading the application.","size":382},{"path":"types\\index.ts","description":"The index.ts file in the types folder defines an IFile interface, which represents a file object with properties such as path, size, description, state, and more. This interface is used to manage and interact with files throughout the application.","size":342},{"path":"src\\components\\insight","description":"Directory name: src\\components\\insight\n\nThe \"insight\" directory contains Vue.js components that provide functionality for viewing, editing, and managing file content and descriptions. Components include ContentInsight.vue for editing file content in an accordion-style interface, FileInsight.vue for displaying file information, FilesInsight.vue for listing files with their details, Result.vue for displaying search query results, and ResultFiles.vue for presenting requested files with descriptions and content."},{"path":"src\\components","description":"Directory name: src\\components\n\nThe \"src\\components\" directory contains a collection of Vue.js components designed for a documentation generator application. These components handle various tasks such as managing configuration settings, displaying and editing file information, configuring generator settings, and interacting with the Insight engine. The directory also includes subdirectories for miscellaneous input components and Insight-related functionality."},{"path":"src","description":"The \"src\" directory contains the core files and components for a Vue.js and Electron-based documentation generator application. It includes the main Vue.js component, Electron application setup, helper functions, and a collection of Vue.js components for managing settings, editing file information, and interacting with the Insight engine. Additionally, it applies Tailwind CSS styling and sets up keyboard event listeners for development purposes."},{"path":".","description":"The \".\" directory contains the core files and components for the \"recursive-documentation\" project, a Vue.js and Electron-based application that generates recursive documentation using ChatGPT. It includes utility functions, configuration files, type definitions, source code for the Vue.js components and Electron setup, as well as scripts and classes for interacting with the GPT-3 API. The project offers features like project setup, customizable configurations, and examples of prompts and model outputs."},{"path":"engine","description":"The \"engine\" directory contains scripts and classes for generating documentation and insights using the GPT-3 API. It includes command-line interface scripts, the DocumentationGenerator class, and the Insight class for interacting with the API. The files provide customizable options for generating descriptions, handling errors, and managing API usage efficiently."}]