[
    {
        "path": "engine\\api.ts",
        "description": "This file contains functions for retrieving descriptions of files and folders using the GPT-3 API. It includes interfaces for file descriptions and response objects, as well as a timeout function for handling API requests. The functions use prompts and options to generate descriptions using the GPT-3 model, and return the resulting description along with the original prompt.",
        "size": 1940
    },
    {
        "path": "engine\\cli.ts",
        "description": "This file contains the command-line interface (CLI) for the DocumentationGenerator class. It imports necessary modules and defines CLI options using the Commander library. The main function reads CLI options and a configuration file, filters files based on exclude patterns, creates a DocumentationGenerator instance, generates documentation, and writes the result to a file. The file can be either specified in CLI options or read from the configuration file.",
        "size": 4365
    },
    {
        "path": "engine\\cli_update.ts",
        "description": "This file, engine\\cli_update.ts, contains a TypeScript script that updates documentation for selected files or directories using the Docs AI API. It includes options for setting maximum tokens, bytes per token, maximum queries, and more. The script reads from a configuration file if available and writes the result to a specified output file.",
        "size": 5283
    },
    {
        "path": "engine\\index.ts",
        "description": "The file engine\\index.ts contains the implementation of a DocumentationGenerator class, which generates descriptions for files and folders using an API. It also includes helper functions for file and folder manipulation, as well as options for customizing the generation process. The class uses a semaphore to limit the number of simultaneous queries and can be stopped at any time.",
        "size": 6101
    },
    {
        "path": "helpers\\index.ts",
        "description": "The file helpers\\index.ts contains functions for working with files and directories, including getting a list of files in a directory, generating a nested file structure, and getting parent folders of a list of files. It also includes an interface for representing nested files.",
        "size": 3579
    },
    {
        "path": "package.json",
        "description": "The package.json file contains information about the project, including its name, version, and dependencies. It also includes scripts for serving, building, and linting the project, as well as specific scripts for building and serving an Electron app. The file lists both production and development dependencies, including Vue.js, Tailwind CSS, TypeScript, and various ESLint plugins.",
        "size": 1689
    },
    {
        "path": "README.md",
        "description": "This README.md file provides a short description of a recursive documentation generator project. It includes instructions on how to set up the project, run the Electron app, and generate documentation using CLI. The project uses the OpenAI API and requires an API key to function. The file also provides information on configuration options and settings, including maximum tokens, bytes per token, maximum queries, output file, excludes pattern, model selection, and temperature.",
        "size": 2718
    },
    {
        "path": "src\\App.vue",
        "description": "The App.vue file contains the main component of the application, which includes various sub-components such as InputText, Files, Settings, and Result. It also includes methods for handling user interactions and updating the state of the application. The component allows users to select a project directory, choose files to include in documentation, and generate documentation using OpenAI's GPT-3 API. Additionally, users can save and load configuration files and clear cache.",
        "size": 12198
    },
    {
        "path": "src\\background.ts",
        "description": "This file, located at src\\background.ts, contains the main code for creating and managing the Electron browser window. It registers the necessary schemes, creates the window with specified dimensions and preferences, loads the appropriate URL based on whether it is in development mode or not, and handles events such as window closing and activation. Additionally, it installs Vue Devtools if in development mode and exits cleanly upon request from the parent process.",
        "size": 2687
    },
    {
        "path": "src\\components\\File.vue",
        "description": "This is a Vue.js component file located at src\\components\\File.vue. It contains an Accordeon component that displays information about a file, including its path, state, prompt, and response. The component can be disabled if there is no description and the state is not an error. The user can click on a button to delete the file. The file's properties are passed as props to the component.",
        "size": 2092
    },
    {
        "path": "src\\components\\Files.vue",
        "description": "The Files.vue file is a Vue component that displays a list of selected files and allows the user to exclude certain files or directories. It also includes a FileTree component and other miscellaneous components for input and display. The component takes in an array of IFile objects and options for generating documentation.",
        "size": 3962
    },
    {
        "path": "src\\components\\Settings.vue",
        "description": "The file src\\components\\Settings.vue contains a Vue component that displays a settings accordion with input fields for configuring various options such as maximum number of requests, model, max tokens file and directory, and temperature. It also includes sub-components for InputText and Accordeon.",
        "size": 3051
    },
    {
        "path": "src\\main.ts",
        "description": "The main.ts file is the entry point for a Vue.js application and contains code to create the app, mount it to the DOM, and handle keyboard events for toggling developer tools and reloading the page. It also imports the App component and a CSS file for styling, as well as the Electron shell module for accessing native desktop functionality.",
        "size": 382
    },
    {
        "path": "types\\index.ts",
        "description": "This file contains an interface for defining properties of a file, including its path, size, state, and description. It also includes a promise for retrieving a description response from an API.",
        "size": 320
    },
    {
        "path": "src\\components",
        "description": "The src\\components directory contains Vue.js components for displaying and managing files and settings. The File.vue component displays information about a file, including its path, state, prompt, and response. The Files.vue component displays a list of selected files and allows the user to exclude certain files or directories. The Settings.vue component provides input fields for configuring various options such as maximum number of requests, model, max tokens file and directory, and temperature."
    },
    {
        "path": "src",
        "description": "The \"src\" directory contains the main components and code for a Vue.js application that allows users to generate documentation using OpenAI's GPT-3 API. It includes the App.vue file, which is the main component of the application, as well as background.ts and main.ts files for managing the Electron browser window and handling keyboard events. The src\\components directory contains Vue.js components for displaying and managing files and settings, including File.vue, Files.vue, and Settings.vue."
    },
    {
        "path": ".",
        "description": "This directory contains files and directories related to a recursive documentation generator project. It includes functions for working with files and directories, a package.json file with project information and dependencies, a README.md file with instructions on how to set up and use the project, an interface for defining properties of a file, and the main components and code for a Vue.js application that allows users to generate documentation using OpenAI's GPT-3 API. Additionally, there are files for generating descriptions of files and folders using APIs, including a command-line interface and helper functions for file and folder manipulation."
    },
    {
        "path": "engine",
        "description": "The \"engine\" directory contains files for generating descriptions of files and folders using APIs. It includes a command-line interface for the DocumentationGenerator class, a script for updating documentation using the Docs AI API, and an implementation of the DocumentationGenerator class with helper functions for file and folder manipulation. The functions use prompts and options to generate descriptions using GPT-3 or Docs AI models, and can be customized to limit simultaneous queries."
    }
]